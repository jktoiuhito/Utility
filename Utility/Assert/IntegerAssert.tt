<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<# string[] types = new[] {
    "sbyte", "short", "int", "long"
    };
#>
<# string[] utypes = new[] {
    "byte", "ushort", "uint", "ulong"
    };
#>
using jktoiuhito.Utility.Assert;
using System;

/*
 * This file was automatically generated <#= DateTime.UtcNow.ToString("yyyy/MM/dd HH:mm:ss") #> UTC time.
 * All manual changes will be lost.
 */

namespace jktoiuhito.Utility.Assert
{
    /// <summary>
    /// Assertion extension methods related to integers.
    /// </summary>
    public static class IntegerAssert
    {
    <# foreach (var type in types) { 
    #>
        /// <summary>
        /// Returns the input <see cref="<#= type #>"/> if it is not zero.
        /// Otherwise throws an <see cref="ArgumentException"/>.
        /// </summary>
        /// <param name="number">
        ///     Input <see cref="<#= type #>"/> to check for zeroness.
        /// </param>
        /// <param name="localname">
        ///     Name of the <see cref="<#= type #>"/>s local variable,
        ///     parameter etc.
        /// </param>
        /// <returns>Thei input <see cref="<#= type #>"/></returns>
        /// <exception cref="ArgumentException">
        ///     <paramref name="number"/> is zero.
        ///     <paramref name="localname"/> is empty or whitespace.
        /// </exception>
        public static <#= type #> NotZero (this <#= type #> number, string? localname = null)
        {
            if (localname != null)
                localname = localname.NotEmptyWhitespace(nameof(localname));
            if (number == 0)
                throw localname == null
                    ? new ArgumentException("number cannot be zero")
                    : new ArgumentException("number cannot be zero", localname);
            return number;
        }
    <#
    } #>
    <# foreach (var type in utypes) { 
    #>
        /// <summary>
        /// Returns the input <see cref="<#= type #>"/> if it is not zero.
        /// Otherwise throws an <see cref="ArgumentException"/>.
        /// </summary>
        /// <param name="number">
        ///     Input <see cref="<#= type #>"/> to check for zeroness.
        /// </param>
        /// <param name="localname">
        ///     Name of the <see cref="<#= type #>"/>s local variable,
        ///     parameter etc.
        /// </param>
        /// <returns>The input <see cref="<#= type #>"/></returns>
        /// <exception cref="ArgumentException">
        ///     <paramref name="number"/> is zero.
        ///     <paramref name="localname"/> is empty or whitespace.
        /// </exception>
        public static <#= type #> NotZero (this <#= type #> number, string? localname = null)
        {
            if (localname != null)
                localname = localname.NotEmptyWhitespace(nameof(localname));
            if (number == 0)
                throw localname == null
                    ? new ArgumentException("number cannot be zero")
                    : new ArgumentException("number cannot be zero", localname);
            return number;
        }
    <#
    } #>
    }
}